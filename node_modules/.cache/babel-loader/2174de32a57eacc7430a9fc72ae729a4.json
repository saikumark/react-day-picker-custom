{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\reactapp\\\\react-calendar-custom\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date()\n    };\n    this.handleDayClick = this.handleDayClick.bind(this);\n    this.state = {\n      selectedDay: undefined\n    };\n  }\n\n  handleDayClick(day, modifiers = {}) {\n    console.log(modifiers);\n    console.log(day);\n    let errorDiv = document.getElementById(\"errorMessage\");\n\n    if (modifiers.disabled) {\n      errorDiv.innerHTML = \"Appointment is not available for the selected day\";\n      return;\n    } else {\n      errorDiv.innerHTML = \"Appointment available\";\n    }\n\n    this.setState({\n      selectedDay: modifiers.selected ? undefined : day\n    });\n  }\n\n  render() {\n    const modifiersStyles = {\n      disabled: {\n        backgroundColor: '#fff',\n        color: '#B2B2B2'\n      },\n      outside: {\n        backgroundColor: '#fff'\n      },\n      selected: {\n        backgroundColor: '#003087'\n      }\n    };\n\n    const getDisabledDays = (month, year) => {\n      let date = new Date(year, month - 1, 1);\n      let today = new Date();\n      const disabledDays = [];\n      const excludeDateArray = [\"12/3/2019\", \"12/13/2019\", \"1/1/2020\"];\n\n      while (date.getMonth() === month - 1) {\n        if (date.getTime() < today.getTime() && date.toLocaleDateString() != today.toLocaleDateString()) {\n          disabledDays.push(new Date(date));\n        }\n\n        if (date.getDay() === 0 || date.getDay() === 6) {\n          disabledDays.push(new Date(date));\n        } else if (excludeDateArray.find(excludedDate => {\n          // console.log(excludedDate + \" ==> \"+date.toLocaleDateString());\n          return excludedDate == date.toLocaleDateString();\n        })) {\n          disabledDays.push(new Date(date));\n        }\n\n        date.setDate(date.getDate() + 1);\n      } // console.log(enabledDays)\n\n\n      return disabledDays;\n    };\n\n    const disabledDays = getDisabledDays(12, 2019);\n    const allDay = `.DayPicker-Day {\n      background-color: #CBE6B1;\n      color: white;\n    }`;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"calendar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"style\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, allDay), React.createElement(DayPicker, {\n      initialMonth: new Date(),\n      modifiersStyles: modifiersStyles,\n      disabledDays: disabledDays,\n      onDayClick: this.handleDayClick,\n      selectedDays: this.state.selectedDay,\n      selectedMonth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"I'm react App\"), React.createElement(\"div\", {\n      id: \"errorMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/wamp64/www/reactapp/react-calendar-custom/src/App.js"],"names":["React","Component","DayPicker","App","constructor","props","state","date","Date","handleDayClick","bind","selectedDay","undefined","day","modifiers","console","log","errorDiv","document","getElementById","disabled","innerHTML","setState","selected","render","modifiersStyles","backgroundColor","color","outside","getDisabledDays","month","year","today","disabledDays","excludeDateArray","getMonth","getTime","toLocaleDateString","push","getDay","find","excludedDate","setDate","getDate","allDay"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport './App.css';\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.handleDayClick = this.handleDayClick.bind(this);\n    this.state = {\n      selectedDay: undefined,\n    };\n  }\n\n  state = {\n    date: new Date(),\n  }\n\n  handleDayClick(day, modifiers = {}) {\n    console.log(modifiers);\n    console.log(day)\n    let errorDiv = document.getElementById(\"errorMessage\")\n\n    if (modifiers.disabled) {\n      errorDiv.innerHTML = \"Appointment is not available for the selected day\";\n      return;\n    }\n    else{\n      errorDiv.innerHTML = \"Appointment available\";\n    }\n    this.setState({\n      selectedDay: modifiers.selected ? undefined : day,\n    });\n  }\n\n  render() {\n\n    const modifiersStyles = {\n      disabled:{\n        backgroundColor: '#fff',\n        color: '#B2B2B2'\n      },\n      outside: {\n        backgroundColor: '#fff'\n      },\n      selected: {\n        backgroundColor: '#003087'\n      },\n    };\n\n    const getDisabledDays = (month,year) => {\n      let date = new Date(year,month-1,1);\n      let today = new Date();\n      const disabledDays = [];\n      \n      const excludeDateArray = [\"12/3/2019\", \"12/13/2019\",\"1/1/2020\"];\n      while (date.getMonth() === month-1) {\n        if(date.getTime() < today.getTime() && date.toLocaleDateString()!=today.toLocaleDateString()){\n          disabledDays.push(new Date(date));\n        }\n        if(date.getDay() === 0 || date.getDay() === 6){\n          disabledDays.push(new Date(date));\n        }\n        else if(excludeDateArray.find((excludedDate) => {\n          // console.log(excludedDate + \" ==> \"+date.toLocaleDateString());\n            return excludedDate == date.toLocaleDateString();\n          })) \n        {\n            disabledDays.push(new Date(date));\n        }\n        date.setDate(date.getDate() + 1);\n      }\n      // console.log(enabledDays)\n      return disabledDays;\n    }\n\n    const disabledDays = getDisabledDays(12, 2019);\n\n    const allDay = `.DayPicker-Day {\n      background-color: #CBE6B1;\n      color: white;\n    }`;\n\n    return (\n      <div className=\"App\">\n        <div className=\"calendar\">\n          <style>{allDay}</style>\n          <DayPicker\n            initialMonth={new Date()}\n            modifiersStyles = {modifiersStyles}\n            disabledDays={disabledDays}\n            onDayClick={this.handleDayClick}\n            selectedDays={this.state.selectedDay}\n            selectedMonth\n          />\n        </div>\n        <h1>I'm react App</h1>\n        <div id=\"errorMessage\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}